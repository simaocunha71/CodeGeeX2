{"message":"character literal may only contain one codepoint","code":null,"level":"error","spans":[{"file_name":"src/bin/rust_91.rs","byte_start":738,"byte_end":742,"line_start":22,"line_end":22,"column_start":43,"column_end":47,"is_primary":true,"text":[{"text":"    } else if r[..].iter().all(|&e| e == !'?\"' && &\"'\" != &!'\"') {","highlight_start":43,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if you meant to write a `str` literal, use double quotes","code":null,"level":"help","spans":[{"file_name":"src/bin/rust_91.rs","byte_start":738,"byte_end":742,"line_start":22,"line_end":22,"column_start":43,"column_end":47,"is_primary":true,"text":[{"text":"    } else if r[..].iter().all(|&e| e == !'?\"' && &\"'\" != &!'\"') {","highlight_start":43,"highlight_end":47}],"label":null,"suggested_replacement":"\"?\\\"\"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: character literal may only contain one codepoint\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/rust_91.rs:22:43\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    } else if r[..].iter().all(|&e| e == !'?\"' && &\"'\" != &!'\"') {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: if you meant to write a `str` literal, use double quotes\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    } else if r[..].iter().all(|&e| e == !\u001b[0m\u001b[0m\u001b[38;5;10m\"?\\\"\"\u001b[0m\u001b[0m && &\"'\" != &!'\"') {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~\u001b[0m\n\n"}
{"message":"character literal may only contain one codepoint","code":null,"level":"error","spans":[{"file_name":"src/bin/rust_91.rs","byte_start":896,"byte_end":900,"line_start":24,"line_end":24,"column_start":43,"column_end":47,"is_primary":true,"text":[{"text":"    } else if r[..].iter().all(|&e| e == !'?\"' && &\"'\" != &!'\"') {","highlight_start":43,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if you meant to write a `str` literal, use double quotes","code":null,"level":"help","spans":[{"file_name":"src/bin/rust_91.rs","byte_start":896,"byte_end":900,"line_start":24,"line_end":24,"column_start":43,"column_end":47,"is_primary":true,"text":[{"text":"    } else if r[..].iter().all(|&e| e == !'?\"' && &\"'\" != &!'\"') {","highlight_start":43,"highlight_end":47}],"label":null,"suggested_replacement":"\"?\\\"\"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: character literal may only contain one codepoint\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/rust_91.rs:24:43\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    } else if r[..].iter().all(|&e| e == !'?\"' && &\"'\" != &!'\"') {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: if you meant to write a `str` literal, use double quotes\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    } else if r[..].iter().all(|&e| e == !\u001b[0m\u001b[0m\u001b[38;5;10m\"?\\\"\"\u001b[0m\u001b[0m && &\"'\" != &!'\"') {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~\u001b[0m\n\n"}
{"message":"character literal may only contain one codepoint","code":null,"level":"error","spans":[{"file_name":"src/bin/rust_91.rs","byte_start":1449,"byte_end":1458,"line_start":38,"line_end":38,"column_start":43,"column_end":52,"is_primary":true,"text":[{"text":"    }) && r.iter().all(|e| e != '\"'\" && &\"'\" != &\"'\"') {","highlight_start":43,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if you meant to write a `str` literal, use double quotes","code":null,"level":"help","spans":[{"file_name":"src/bin/rust_91.rs","byte_start":1449,"byte_end":1458,"line_start":38,"line_end":38,"column_start":43,"column_end":52,"is_primary":true,"text":[{"text":"    }) && r.iter().all(|e| e != '\"'\" && &\"'\" != &\"'\"') {","highlight_start":43,"highlight_end":52}],"label":null,"suggested_replacement":"\"\\\" != &\\\"\"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: character literal may only contain one codepoint\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/rust_91.rs:38:43\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }) && r.iter().all(|e| e != '\"'\" && &\"'\" != &\"'\"') {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: if you meant to write a `str` literal, use double quotes\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    }) && r.iter().all(|e| e != '\"'\" && &\"\u001b[0m\u001b[0m\u001b[38;5;10m\"\\\" != &\\\"\"\u001b[0m\u001b[0m\"') {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~\u001b[0m\n\n"}
{"message":"unterminated character literal","code":{"code":"E0762","explanation":"A character literal wasn't ended with a quote.\n\nErroneous code example:\n\n```compile_fail,E0762\nstatic C: char = '●; // error!\n```\n\nTo fix this error, add the missing quote:\n\n```\nstatic C: char = '●'; // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/bin/rust_91.rs","byte_start":1595,"byte_end":1596,"line_start":45,"line_end":45,"column_start":40,"column_end":41,"is_primary":true,"text":[{"text":"    let r = replace_all(&s[..], \"!?\", \"'","highlight_start":40,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0762]\u001b[0m\u001b[0m\u001b[1m: unterminated character literal\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/rust_91.rs:45:40\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let r = replace_all(&s[..], \"!?\", \"'\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\n"}
{"message":"aborting due to 4 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 4 previous errors\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0762`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0762`.\u001b[0m\n"}
