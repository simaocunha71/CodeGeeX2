{"message":"unterminated block comment","code":{"code":"E0758","explanation":"A multi-line (doc-)comment is unterminated.\n\nErroneous code example:\n\n```compile_fail,E0758\n/* I am not terminated!\n```\n\nThe same goes for doc comments:\n\n```compile_fail,E0758\n/*! I am not terminated!\n```\n\nYou need to end your multi-line comment with `*/` in order to fix this error:\n\n```\n/* I am terminated! */\n/*! I am also terminated! */\n```\n"},"level":"error","spans":[{"file_name":"src/bin/rust_3.rs","byte_start":1391,"byte_end":2581,"line_start":40,"line_end":69,"column_start":1,"column_end":3,"is_primary":true,"text":[{"text":"/*    ","highlight_start":1,"highlight_end":7},{"text":"    // Create a large dictionary with every possible combination of numbers to use for withdrawls and deposits","highlight_start":1,"highlight_end":111},{"text":"    let combinations: Vec<(u32, String)> = (0..10).map(|i| {","highlight_start":1,"highlight_end":61},{"text":"        let (max_positive, min_negative) = (0xffff - (i as i32) + 1, *i);","highlight_start":1,"highlight_end":74},{"text":"        let mut s:String = format!(\"deposit\");","highlight_start":1,"highlight_end":47},{"text":"        for c in ('a'..'z').rev() {","highlight_start":1,"highlight_end":36},{"text":"            if max_positive.remainder(c) >= 1 && min_negative.remainder(c) > -2 {","highlight_start":1,"highlight_end":82},{"text":"                s += &c.to_string();","highlight_start":1,"highlight_end":37},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        (max_positive, min_negative).map(|v| v.to_string()).collect()","highlight_start":1,"highlight_end":70},{"text":"    }).collect::<Vec<_>>(); // Collect the values from the loop into a vec instead of returning them immediately","highlight_start":1,"highlight_end":113},{"text":"    for deposit in combinations {","highlight_start":1,"highlight_end":34},{"text":"        let (d,","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"#[cfg(test)]","highlight_start":1,"highlight_end":13},{"text":"mod tests {","highlight_start":1,"highlight_end":12},{"text":"    use super::*;","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"#[test]","highlight_start":1,"highlight_end":8},{"text":"    fn test_below_zero() {","highlight_start":1,"highlight_end":27},{"text":"        assert_eq!(below_zero(vec![]), false);","highlight_start":1,"highlight_end":47},{"text":"        assert_eq!(below_zero(vec![1, 2, -3, 1, 2, -3]), false);","highlight_start":1,"highlight_end":65},{"text":"        assert_eq!(below_zero(vec![1, 2, -4, 5, 6]), true);","highlight_start":1,"highlight_end":60},{"text":"        assert_eq!(below_zero(vec![1, -1, 2, -2, 5, -5, 4, -4]), false);","highlight_start":1,"highlight_end":73},{"text":"        assert_eq!(below_zero(vec![1, -1, 2, -2, 5, -5, 4, -5]), true);","highlight_start":1,"highlight_end":72},{"text":"        assert_eq!(below_zero(vec![1, -2, 2, -2, 5, -5, 4, -4]), true);","highlight_start":1,"highlight_end":72},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"}","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0758]\u001b[0m\u001b[0m\u001b[1m: unterminated block comment\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/rust_3.rs:40:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m/*    \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    // Create a large dictionary with every possible combination of numbers to use for withdrawls and deposits\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let combinations: Vec<(u32, String)> = (0..10).map(|i| {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let (max_positive, min_negative) = (0xffff - (i as i32) + 1, *i);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m68\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m69\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|__^\u001b[0m\n\n"}
{"message":"aborting due to previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to previous error\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0758`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0758`.\u001b[0m\n"}
