{"message":"mismatched closing delimiter: `)`","code":null,"level":"error","spans":[{"file_name":"src/bin/rust_132.rs","byte_start":1747,"byte_end":1748,"line_start":43,"line_end":43,"column_start":97,"column_end":98,"is_primary":true,"text":[{"text":"            for j in 2..9 {if !j.starts_with('[') || (n[i + j] != ']' && ch >= '0' && ch <= '9')){v.push(false);}} else if let Some(&mut v) = nesting.last_mut() {","highlight_start":97,"highlight_end":98}],"label":"mismatched closing delimiter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/bin/rust_132.rs","byte_start":1677,"byte_end":1678,"line_start":43,"line_end":43,"column_start":27,"column_end":28,"is_primary":true,"text":[{"text":"            for j in 2..9 {if !j.starts_with('[') || (n[i + j] != ']' && ch >= '0' && ch <= '9')){v.push(false);}} else if let Some(&mut v) = nesting.last_mut() {","highlight_start":27,"highlight_end":28}],"label":"unclosed delimiter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: mismatched closing delimiter: `)`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/rust_132.rs:43:27\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   for j in 2..9 {if !j.starts_with('[') || (n[i + j] != ']' && ch >= '0' && ch <= '9')){v.push(false);}} else if let Some(&mut v) = n\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munclosed delimiter\u001b[0m\u001b[0m                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmismatched closing delimiter\u001b[0m\n\n"}
{"message":"this file contains an unclosed delimiter","code":null,"level":"error","spans":[{"file_name":"src/bin/rust_132.rs","byte_start":1135,"byte_end":1136,"line_start":34,"line_end":34,"column_start":71,"column_end":72,"is_primary":false,"text":[{"text":"fn get_all_nested(str: &str) -> (Vec<Vec<bool>>, Vec<Vec<Vec<bool>>>) {","highlight_start":71,"highlight_end":72}],"label":"unclosed delimiter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/bin/rust_132.rs","byte_start":1339,"byte_end":1340,"line_start":36,"line_end":36,"column_start":167,"column_end":168,"is_primary":false,"text":[{"text":"    if !n || str.contains(\"]\") || str.len() != 10 || n[8..].iter().map(|s| s.starts_with('[')) == false || str.len() % 2 != 0 {return (Vec::new(), Vec::new());} else {","highlight_start":167,"highlight_end":168}],"label":"unclosed delimiter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/bin/rust_132.rs","byte_start":1493,"byte_end":1494,"line_start":41,"line_end":41,"column_start":23,"column_end":24,"is_primary":false,"text":[{"text":"        for i in 2..9 {","highlight_start":23,"highlight_end":24}],"label":"unclosed delimiter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/bin/rust_132.rs","byte_start":1812,"byte_end":1813,"line_start":43,"line_end":43,"column_start":162,"column_end":163,"is_primary":false,"text":[{"text":"            for j in 2..9 {if !j.starts_with('[') || (n[i + j] != ']' && ch >= '0' && ch <= '9')){v.push(false);}} else if let Some(&mut v) = nesting.last_mut() {","highlight_start":162,"highlight_end":163}],"label":"unclosed delimiter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/bin/rust_132.rs","byte_start":1840,"byte_end":1841,"line_start":44,"line_end":44,"column_start":27,"column_end":28,"is_primary":false,"text":[{"text":"            for j in 2..9 {if !j.starts_with('[') || (n[i +","highlight_start":27,"highlight_end":28}],"label":"unclosed delimiter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/bin/rust_132.rs","byte_start":1867,"byte_end":1868,"line_start":44,"line_end":44,"column_start":54,"column_end":55,"is_primary":false,"text":[{"text":"            for j in 2..9 {if !j.starts_with('[') || (n[i +","highlight_start":54,"highlight_end":55}],"label":"unclosed delimiter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/bin/rust_132.rs","byte_start":1869,"byte_end":1870,"line_start":44,"line_end":44,"column_start":56,"column_end":57,"is_primary":false,"text":[{"text":"            for j in 2..9 {if !j.starts_with('[') || (n[i +","highlight_start":56,"highlight_end":57}],"label":"unclosed delimiter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/bin/rust_132.rs","byte_start":1747,"byte_end":1747,"line_start":43,"line_end":43,"column_start":97,"column_end":97,"is_primary":false,"text":[{"text":"            for j in 2..9 {if !j.starts_with('[') || (n[i + j] != ']' && ch >= '0' && ch <= '9')){v.push(false);}} else if let Some(&mut v) = nesting.last_mut() {","highlight_start":97,"highlight_end":97}],"label":"missing open `(` for this delimiter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/bin/rust_132.rs","byte_start":2634,"byte_end":2634,"line_start":68,"line_end":68,"column_start":3,"column_end":3,"is_primary":true,"text":[{"text":"}","highlight_start":3,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: this file contains an unclosed delimiter\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/rust_132.rs:68:3\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn get_all_nested(str: &str) -> (Vec<Vec<bool>>, Vec<Vec<Vec<bool>>>) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12munclosed delimiter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let n = str.chars().peekable();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    if !n || str.contains(\"]\") || str.len() != 10 || n[8..].iter().map(|s| s.starts_with('[')) == false || str.len() % 2 != 0 {return (Vec::new(), Vec::new());} else {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                                                                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12munclosed delimiter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        for i in 2..9 {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12munclosed delimiter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            if !i.starts_with('[') || (n[i + 1] != ']' && (ch >= '0' && ch <= '9')) {nesting.push(vec![]);} else if let Some(&mut v) = nesting.last_mut() {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            for j in 2..9 {if !j.starts_with('[') || (n[i + j] != ']' && ch >= '0' && ch <= '9')){v.push(false);}} else if let Some(&mut v) = nesting.last_mut() {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mmissing open `(` for this delimiter\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12munclosed delimiter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            for j in 2..9 {if !j.starts_with('[') || (n[i +\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12munclosed delimiter\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12munclosed delimiter\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12munclosed delimiter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m68\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\n"}
{"message":"aborting due to 2 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 2 previous errors\u001b[0m\n\n"}
