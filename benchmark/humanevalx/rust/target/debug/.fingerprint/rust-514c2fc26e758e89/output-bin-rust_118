{"message":"unterminated block comment","code":{"code":"E0758","explanation":"A multi-line (doc-)comment is unterminated.\n\nErroneous code example:\n\n```compile_fail,E0758\n/* I am not terminated!\n```\n\nThe same goes for doc comments:\n\n```compile_fail,E0758\n/*! I am not terminated!\n```\n\nYou need to end your multi-line comment with `*/` in order to fix this error:\n\n```\n/* I am terminated! */\n/*! I am also terminated! */\n```\n"},"level":"error","spans":[{"file_name":"src/bin/rust_118.rs","byte_start":700,"byte_end":3080,"line_start":24,"line_end":76,"column_start":5,"column_end":3,"is_primary":true,"text":[{"text":"    /*","highlight_start":5,"highlight_end":7},{"text":"    Find the closest vowel between x and z, which doesn't contain any consonant from right side of word.","highlight_start":1,"highlight_end":105},{"text":"    let mut x_closest: &str;","highlight_start":1,"highlight_end":29},{"text":"    let mut z_closest: &str;","highlight_start":1,"highlight_end":29},{"text":"    // Get hash map of all possible combinations","highlight_start":1,"highlight_end":49},{"text":"    let mut hash_map = HashMap::new();","highlight_start":1,"highlight_end":39},{"text":"    for (i, &vowel) in word.chars().enumerate() {","highlight_start":1,"highlight_end":50},{"text":"        if i > 7 && !(vowel == 'e' || vowel == 'a') {","highlight_start":1,"highlight_end":54},{"text":"            continue;","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        match hash_map.entry((i - 1, vowel)) {","highlight_start":1,"highlight_end":47},{"text":"            hashmap::Entry::Occupied(occup) => occup.get().0.push(x), // Add current vowel to all combinations we've tried before","highlight_start":1,"highlight_end":130},{"text":"            _ => {}","highlight_start":1,"highlight_end":20},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    for (e, &o_vowel) in word.chars()[8..].iter() {","highlight_start":1,"highlight_end":52},{"text":"        if o_vowel != \"e\" && o_vowel != \"a\" {  // Skip vowels at the beginning and end of the string","highlight_start":1,"highlight_end":101},{"text":"            continue;","highlight_start":1,"highlight_end":22},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            match hash_map.entry((8, o_vowel)) {","highlight_start":1,"highlight_end":49},{"text":"                hashmap::Entry::Occupied(ooccup) => {  // Search for combinations we already tried before","highlight_start":1,"highlight_end":106},{"text":"                    let (i, ovowel) = *ooccup.get();  // Take current combination from the hash map","highlight_start":1,"highlight_end":100},{"text":"                    if i > x && o_vowel != \"e\" || o_vowel == \"a\" {  // Skip when searching vowels at the beginning of the string ","highlight_start":1,"highlight_end":130},{"text":"                        continue;","highlight_start":1,"highlight_end":34},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        let (i, ovowel) = *ooccup.get();  // Search for current combination in the hash map","highlight_start":1,"highlight_end":108},{"text":"                        if i > z && ovowel == \"e\" || ovowel == \"a\" {  // Skip when searching vowels at the end of the string ","highlight_start":1,"highlight_end":126},{"text":"                            continue;","highlight_start":1,"highlight_end":38},{"text":"                        } else {","highlight_start":1,"highlight_end":33},{"text":"                            let distance: i8 = i - (x as i8) +","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"#[cfg(test)]","highlight_start":1,"highlight_end":13},{"text":"mod tests {","highlight_start":1,"highlight_end":12},{"text":"    use super::*;","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_get_closest_vowel() {","highlight_start":1,"highlight_end":34},{"text":"        assert_eq!(get_closest_vowel(\"yogurt\"), \"u\");","highlight_start":1,"highlight_end":54},{"text":"        assert_eq!(get_closest_vowel(\"full\"), \"u\");","highlight_start":1,"highlight_end":52},{"text":"        assert_eq!(get_closest_vowel(\"easy\"), \"\");","highlight_start":1,"highlight_end":51},{"text":"        assert_eq!(get_closest_vowel(\"eAsy\"), \"\");","highlight_start":1,"highlight_end":51},{"text":"        assert_eq!(get_closest_vowel(\"ali\"), \"\");","highlight_start":1,"highlight_end":50},{"text":"        assert_eq!(get_closest_vowel(\"bad\"), \"a\");","highlight_start":1,"highlight_end":51},{"text":"        assert_eq!(get_closest_vowel(\"most\"), \"o\");","highlight_start":1,"highlight_end":52},{"text":"        assert_eq!(get_closest_vowel(\"ab\"), \"\");","highlight_start":1,"highlight_end":49},{"text":"        assert_eq!(get_closest_vowel(\"ba\"), \"\");","highlight_start":1,"highlight_end":49},{"text":"        assert_eq!(get_closest_vowel(\"quick\"), \"\");","highlight_start":1,"highlight_end":52},{"text":"        assert_eq!(get_closest_vowel(\"anime\"), \"i\");","highlight_start":1,"highlight_end":53},{"text":"        assert_eq!(get_closest_vowel(\"Asia\"), \"\");","highlight_start":1,"highlight_end":51},{"text":"        assert_eq!(get_closest_vowel(\"Above\"), \"o\");","highlight_start":1,"highlight_end":53},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"}","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0758]\u001b[0m\u001b[0m\u001b[1m: unterminated block comment\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/rust_118.rs:24:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /*\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Find the closest vowel between x and z, which doesn't contain any consonant from right side of word.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut x_closest: &str;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut z_closest: &str;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m75\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m76\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|__^\u001b[0m\n\n"}
{"message":"aborting due to previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to previous error\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0758`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0758`.\u001b[0m\n"}
