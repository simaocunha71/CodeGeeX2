{"reason":"compiler-artifact","package_id":"memchr 2.5.0 (registry+https://github.com/rust-lang/crates.io-index)","manifest_path":"/home/simao/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.5.0/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/simao/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.5.0/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/target/debug/build/memchr-89f27e1d4194eed3/build-script-build"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"memchr 2.5.0 (registry+https://github.com/rust-lang/crates.io-index)","linked_libs":[],"linked_paths":[],"cfgs":["memchr_runtime_simd","memchr_runtime_sse2","memchr_runtime_sse42","memchr_runtime_avx"],"env":[],"out_dir":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/target/debug/build/memchr-65d4344c3a86368c/out"}
{"reason":"compiler-artifact","package_id":"libc 0.2.139 (registry+https://github.com/rust-lang/crates.io-index)","manifest_path":"/home/simao/.cargo/registry/src/github.com-1ecc6299db9ec823/libc-0.2.139/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/simao/.cargo/registry/src/github.com-1ecc6299db9ec823/libc-0.2.139/build.rs","edition":"2015","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/target/debug/build/libc-fcc8e41b1bbb72cd/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"regex-syntax 0.6.28 (registry+https://github.com/rust-lang/crates.io-index)","manifest_path":"/home/simao/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.28/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"regex-syntax","src_path":"/home/simao/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.28/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","unicode","unicode-age","unicode-bool","unicode-case","unicode-gencat","unicode-perl","unicode-script","unicode-segment"],"filenames":["/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/target/debug/deps/libregex_syntax-d87efd87ff8e8051.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"md5 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)","manifest_path":"/home/simao/.cargo/registry/src/github.com-1ecc6299db9ec823/md5-0.7.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"md5","src_path":"/home/simao/.cargo/registry/src/github.com-1ecc6299db9ec823/md5-0.7.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/target/debug/deps/libmd5-a37029e215759d5f.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"libc 0.2.139 (registry+https://github.com/rust-lang/crates.io-index)","linked_libs":[],"linked_paths":[],"cfgs":["freebsd11","libc_priv_mod_use","libc_union","libc_const_size_of","libc_align","libc_int128","libc_core_cvoid","libc_packedN","libc_cfg_target_vendor","libc_non_exhaustive","libc_ptr_addr_of","libc_underscore_const_names","libc_const_extern_fn"],"env":[],"out_dir":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/target/debug/build/libc-a2202c645d850565/out"}
{"reason":"compiler-artifact","package_id":"memchr 2.5.0 (registry+https://github.com/rust-lang/crates.io-index)","manifest_path":"/home/simao/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"memchr","src_path":"/home/simao/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.5.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/target/debug/deps/libmemchr-8f02a2eba876215d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"aho-corasick 0.7.20 (registry+https://github.com/rust-lang/crates.io-index)","manifest_path":"/home/simao/.cargo/registry/src/github.com-1ecc6299db9ec823/aho-corasick-0.7.20/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"aho_corasick","src_path":"/home/simao/.cargo/registry/src/github.com-1ecc6299db9ec823/aho-corasick-0.7.20/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/target/debug/deps/libaho_corasick-b4033ddd2627ef64.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"libc 0.2.139 (registry+https://github.com/rust-lang/crates.io-index)","manifest_path":"/home/simao/.cargo/registry/src/github.com-1ecc6299db9ec823/libc-0.2.139/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"libc","src_path":"/home/simao/.cargo/registry/src/github.com-1ecc6299db9ec823/libc-0.2.139/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/target/debug/deps/liblibc-4435a060dcfc25c8.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"rand 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)","manifest_path":"/home/simao/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.4.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand","src_path":"/home/simao/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.4.6/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","libc","std"],"filenames":["/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/target/debug/deps/librand-54e90b789ee440ce.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"regex 1.7.1 (registry+https://github.com/rust-lang/crates.io-index)","manifest_path":"/home/simao/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.7.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"regex","src_path":"/home/simao/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.7.1/src/lib.rs","edition":"2018","doc":true,"doctest":false,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["aho-corasick","default","memchr","perf","perf-cache","perf-dfa","perf-inline","perf-literal","std","unicode","unicode-age","unicode-bool","unicode-case","unicode-gencat","unicode-perl","unicode-script","unicode-segment"],"filenames":["/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/target/debug/deps/libregex-646ba2766471edbd.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-message","package_id":"rust 0.1.0 (path+file:///home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust)","manifest_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"rust_53","src_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/src/bin/rust_53.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error: this file contains an unclosed delimiter\n  --> src/bin/rust_53.rs:51:3\n   |\n13 | fn add(x:i32, y:i32) -> i32{\n   |                            - unclosed delimiter\n...\n17 |     {\n   |     - unclosed delimiter\n...\n20 |         if let Some(x)=x.deref() { let $v2=$v; $(\n   |                                  -              - unclosed delimiter\n   |                                  |\n   |                                  unclosed delimiter\n...\n24 |             if let Some($v) = replace(&$v2,[||]); $(let $v1=$v.deref(), let x=$x.$($v2,$v1); {\n   |                                                    - unclosed delimiter                      - unclosed delimiter\n25 |                 if i == 0 && j > $v || x > y { return max(max(x,y),j) + (j - min(min($v.get(i as u32).unwrap() & ((x >> i) | 1)), min(x.$(...\n   |                                              - this delimiter might not be properly closed...\n26 |             } else {$v=replace(&$v,0,[$||]; x=$x; $v.set(j,x.clone());\n   |             -      -          - unclosed delimiter\n   |             |      |\n   |             |      unclosed delimiter\n   |             ...as it matches this but it has different indentation\n27 |                 let r=[||]; let (r_x,$r_x)=r.tuple(); for $i in 0..j { if i==1 && !r_x.$($v,i) { return max(max(r.$($v,$v1),y).min(x.$(&\n   |                                                                      -                         -           -                      -   - unclosed delimiter\n   |                                                                      |                         |           |                      |\n   |                                                                      |                         |           unclosed delimiter     unclosed delimiter\n   |                                                                      unclosed delimiter        unclosed delimiter\n...\n51 | }\n   |   ^\n\n","children":[],"code":null,"level":"error","message":"this file contains an unclosed delimiter","spans":[{"byte_end":265,"byte_start":264,"column_end":29,"column_start":28,"expansion":null,"file_name":"src/bin/rust_53.rs","is_primary":false,"label":"unclosed delimiter","line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":28,"text":"fn add(x:i32, y:i32) -> i32{"}]},{"byte_end":401,"byte_start":400,"column_end":3,"column_start":2,"expansion":null,"file_name":"src/bin/rust_53.rs","is_primary":false,"label":"unclosed delimiter","line_end":17,"line_start":17,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":3,"highlight_start":2,"text":"\t{"}]},{"byte_end":702,"byte_start":701,"column_end":29,"column_start":28,"expansion":null,"file_name":"src/bin/rust_53.rs","is_primary":false,"label":"unclosed delimiter","line_end":20,"line_start":20,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":29,"highlight_start":28,"text":"\t\tif let Some(x)=x.deref() { let $v2=$v; $("}]},{"byte_end":717,"byte_start":716,"column_end":44,"column_start":43,"expansion":null,"file_name":"src/bin/rust_53.rs","is_primary":false,"label":"unclosed delimiter","line_end":20,"line_start":20,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":44,"highlight_start":43,"text":"\t\tif let Some(x)=x.deref() { let $v2=$v; $("}]},{"byte_end":934,"byte_start":933,"column_end":44,"column_start":43,"expansion":null,"file_name":"src/bin/rust_53.rs","is_primary":false,"label":"unclosed delimiter","line_end":24,"line_start":24,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":44,"highlight_start":43,"text":"\t\t\tif let Some($v) = replace(&$v2,[||]); $(let $v1=$v.deref(), let x=$x.$($v2,$v1); {"}]},{"byte_end":976,"byte_start":975,"column_end":86,"column_start":85,"expansion":null,"file_name":"src/bin/rust_53.rs","is_primary":false,"label":"unclosed delimiter","line_end":24,"line_start":24,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":86,"highlight_start":85,"text":"\t\t\tif let Some($v) = replace(&$v2,[||]); $(let $v1=$v.deref(), let x=$x.$($v2,$v1); {"}]},{"byte_end":1143,"byte_start":1142,"column_end":12,"column_start":11,"expansion":null,"file_name":"src/bin/rust_53.rs","is_primary":false,"label":"unclosed delimiter","line_end":26,"line_start":26,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":12,"highlight_start":11,"text":"\t\t\t} else {$v=replace(&$v,0,[$||]; x=$x; $v.set(j,x.clone());"}]},{"byte_end":1154,"byte_start":1153,"column_end":23,"column_start":22,"expansion":null,"file_name":"src/bin/rust_53.rs","is_primary":false,"label":"unclosed delimiter","line_end":26,"line_start":26,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":23,"highlight_start":22,"text":"\t\t\t} else {$v=replace(&$v,0,[$||]; x=$x; $v.set(j,x.clone());"}]},{"byte_end":1252,"byte_start":1251,"column_end":59,"column_start":58,"expansion":null,"file_name":"src/bin/rust_53.rs","is_primary":false,"label":"unclosed delimiter","line_end":27,"line_start":27,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":59,"highlight_start":58,"text":"\t\t\t\tlet r=[||]; let (r_x,$r_x)=r.tuple(); for $i in 0..j { if i==1 && !r_x.$($v,i) { return max(max(r.$($v,$v1),y).min(x.$(&"}]},{"byte_end":1278,"byte_start":1277,"column_end":85,"column_start":84,"expansion":null,"file_name":"src/bin/rust_53.rs","is_primary":false,"label":"unclosed delimiter","line_end":27,"line_start":27,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":85,"highlight_start":84,"text":"\t\t\t\tlet r=[||]; let (r_x,$r_x)=r.tuple(); for $i in 0..j { if i==1 && !r_x.$($v,i) { return max(max(r.$($v,$v1),y).min(x.$(&"}]},{"byte_end":1290,"byte_start":1289,"column_end":97,"column_start":96,"expansion":null,"file_name":"src/bin/rust_53.rs","is_primary":false,"label":"unclosed delimiter","line_end":27,"line_start":27,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":97,"highlight_start":96,"text":"\t\t\t\tlet r=[||]; let (r_x,$r_x)=r.tuple(); for $i in 0..j { if i==1 && !r_x.$($v,i) { return max(max(r.$($v,$v1),y).min(x.$(&"}]},{"byte_end":1313,"byte_start":1312,"column_end":120,"column_start":119,"expansion":null,"file_name":"src/bin/rust_53.rs","is_primary":false,"label":"unclosed delimiter","line_end":27,"line_start":27,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":120,"highlight_start":119,"text":"\t\t\t\tlet r=[||]; let (r_x,$r_x)=r.tuple(); for $i in 0..j { if i==1 && !r_x.$($v,i) { return max(max(r.$($v,$v1),y).min(x.$(&"}]},{"byte_end":1317,"byte_start":1316,"column_end":124,"column_start":123,"expansion":null,"file_name":"src/bin/rust_53.rs","is_primary":false,"label":"unclosed delimiter","line_end":27,"line_start":27,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":124,"highlight_start":123,"text":"\t\t\t\tlet r=[||]; let (r_x,$r_x)=r.tuple(); for $i in 0..j { if i==1 && !r_x.$($v,i) { return max(max(r.$($v,$v1),y).min(x.$(&"}]},{"byte_end":1010,"byte_start":1010,"column_end":34,"column_start":34,"expansion":null,"file_name":"src/bin/rust_53.rs","is_primary":false,"label":"this delimiter might not be properly closed...","line_end":25,"line_start":25,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":34,"text":"\t\t\t\tif i == 0 && j > $v || x > y { return max(max(x,y),j) + (j - min(min($v.get(i as u32).unwrap() & ((x >> i) | 1)), min(x.$($v,$v1)) & ((y >> j) | 1)));"}]},{"byte_end":1135,"byte_start":1135,"column_end":4,"column_start":4,"expansion":null,"file_name":"src/bin/rust_53.rs","is_primary":false,"label":"...as it matches this but it has different indentation","line_end":26,"line_start":26,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":4,"highlight_start":4,"text":"\t\t\t} else {$v=replace(&$v,0,[$||]; x=$x; $v.set(j,x.clone());"}]},{"byte_end":1828,"byte_start":1828,"column_end":3,"column_start":3,"expansion":null,"file_name":"src/bin/rust_53.rs","is_primary":true,"label":null,"line_end":51,"line_start":51,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":3,"highlight_start":3,"text":"}"}]}]}}
{"reason":"compiler-message","package_id":"rust 0.1.0 (path+file:///home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust)","manifest_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"rust_53","src_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/src/bin/rust_53.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error: aborting due to previous error\n\n","children":[],"code":null,"level":"error","message":"aborting due to previous error","spans":[]}}
{"reason":"build-finished","success":false}
