{"reason":"compiler-artifact","package_id":"memchr 2.5.0 (registry+https://github.com/rust-lang/crates.io-index)","manifest_path":"/home/simao/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.5.0/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/simao/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.5.0/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/target/debug/build/memchr-89f27e1d4194eed3/build-script-build"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"memchr 2.5.0 (registry+https://github.com/rust-lang/crates.io-index)","linked_libs":[],"linked_paths":[],"cfgs":["memchr_runtime_simd","memchr_runtime_sse2","memchr_runtime_sse42","memchr_runtime_avx"],"env":[],"out_dir":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/target/debug/build/memchr-65d4344c3a86368c/out"}
{"reason":"compiler-artifact","package_id":"libc 0.2.139 (registry+https://github.com/rust-lang/crates.io-index)","manifest_path":"/home/simao/.cargo/registry/src/github.com-1ecc6299db9ec823/libc-0.2.139/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/simao/.cargo/registry/src/github.com-1ecc6299db9ec823/libc-0.2.139/build.rs","edition":"2015","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/target/debug/build/libc-fcc8e41b1bbb72cd/build-script-build"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"libc 0.2.139 (registry+https://github.com/rust-lang/crates.io-index)","linked_libs":[],"linked_paths":[],"cfgs":["freebsd11","libc_priv_mod_use","libc_union","libc_const_size_of","libc_align","libc_int128","libc_core_cvoid","libc_packedN","libc_cfg_target_vendor","libc_non_exhaustive","libc_ptr_addr_of","libc_underscore_const_names","libc_const_extern_fn"],"env":[],"out_dir":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/target/debug/build/libc-a2202c645d850565/out"}
{"reason":"compiler-artifact","package_id":"memchr 2.5.0 (registry+https://github.com/rust-lang/crates.io-index)","manifest_path":"/home/simao/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"memchr","src_path":"/home/simao/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.5.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/target/debug/deps/libmemchr-8f02a2eba876215d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"regex-syntax 0.6.28 (registry+https://github.com/rust-lang/crates.io-index)","manifest_path":"/home/simao/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.28/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"regex-syntax","src_path":"/home/simao/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.28/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","unicode","unicode-age","unicode-bool","unicode-case","unicode-gencat","unicode-perl","unicode-script","unicode-segment"],"filenames":["/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/target/debug/deps/libregex_syntax-d87efd87ff8e8051.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"md5 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)","manifest_path":"/home/simao/.cargo/registry/src/github.com-1ecc6299db9ec823/md5-0.7.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"md5","src_path":"/home/simao/.cargo/registry/src/github.com-1ecc6299db9ec823/md5-0.7.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/target/debug/deps/libmd5-a37029e215759d5f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"aho-corasick 0.7.20 (registry+https://github.com/rust-lang/crates.io-index)","manifest_path":"/home/simao/.cargo/registry/src/github.com-1ecc6299db9ec823/aho-corasick-0.7.20/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"aho_corasick","src_path":"/home/simao/.cargo/registry/src/github.com-1ecc6299db9ec823/aho-corasick-0.7.20/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/target/debug/deps/libaho_corasick-b4033ddd2627ef64.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"libc 0.2.139 (registry+https://github.com/rust-lang/crates.io-index)","manifest_path":"/home/simao/.cargo/registry/src/github.com-1ecc6299db9ec823/libc-0.2.139/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"libc","src_path":"/home/simao/.cargo/registry/src/github.com-1ecc6299db9ec823/libc-0.2.139/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/target/debug/deps/liblibc-4435a060dcfc25c8.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"rand 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)","manifest_path":"/home/simao/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.4.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand","src_path":"/home/simao/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.4.6/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","libc","std"],"filenames":["/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/target/debug/deps/librand-54e90b789ee440ce.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"regex 1.7.1 (registry+https://github.com/rust-lang/crates.io-index)","manifest_path":"/home/simao/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.7.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"regex","src_path":"/home/simao/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.7.1/src/lib.rs","edition":"2018","doc":true,"doctest":false,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["aho-corasick","default","memchr","perf","perf-cache","perf-dfa","perf-inline","perf-literal","std","unicode","unicode-age","unicode-bool","unicode-case","unicode-gencat","unicode-perl","unicode-script","unicode-segment"],"filenames":["/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/target/debug/deps/libregex-646ba2766471edbd.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-message","package_id":"rust 0.1.0 (path+file:///home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust)","manifest_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"rust_64","src_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/src/bin/rust_64.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0428]: the name `main` is defined multiple times\n  --> src/bin/rust_64.rs:29:1\n   |\n2  | fn main(){ \n   | --------- previous definition of the value `main` here\n...\n29 | fn main() -> () {\n   | ^^^^^^^^^^^^^^^ `main` redefined here\n   |\n   = note: `main` must be defined only once in the value namespace of this module\n\n","children":[{"children":[],"code":null,"level":"note","message":"`main` must be defined only once in the value namespace of this module","rendered":null,"spans":[]}],"code":{"code":"E0428","explanation":"A type or module has been defined more than once.\n\nErroneous code example:\n\n```compile_fail,E0428\nstruct Bar;\nstruct Bar; // error: duplicate definition of value `Bar`\n```\n\nPlease verify you didn't misspell the type/module's name or remove/rename the\nduplicated one. Example:\n\n```\nstruct Bar;\nstruct Bar2; // ok!\n```\n"},"level":"error","message":"the name `main` is defined multiple times","spans":[{"byte_end":796,"byte_start":781,"column_end":16,"column_start":1,"expansion":null,"file_name":"src/bin/rust_64.rs","is_primary":true,"label":"`main` redefined here","line_end":29,"line_start":29,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":1,"text":"fn main() -> () {"}]},{"byte_end":10,"byte_start":1,"column_end":10,"column_start":1,"expansion":null,"file_name":"src/bin/rust_64.rs","is_primary":false,"label":"previous definition of the value `main` here","line_end":2,"line_start":2,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":10,"highlight_start":1,"text":"fn main(){ "}]}]}}
{"reason":"compiler-message","package_id":"rust 0.1.0 (path+file:///home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust)","manifest_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"rust_64","src_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/src/bin/rust_64.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning: unused imports: `HashMap`, `ascii::AsciiExt`, `max`, `ops::Index`, `self`, `slice::Iter`\n  --> src/bin/rust_64.rs:11:11\n   |\n11 | use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};\n   |           ^^^^^^^^^^^        ^^^  ^^^^                                        ^^^^^^^   ^^^^^^^^^^  ^^^^^^^^^^^^^^^\n   |\n   = note: `#[warn(unused_imports)]` on by default\n\n","children":[{"children":[],"code":null,"level":"note","message":"`#[warn(unused_imports)]` on by default","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"remove the unused imports","rendered":null,"spans":[{"byte_end":335,"byte_start":304,"column_end":42,"column_start":11,"expansion":null,"file_name":"src/bin/rust_64.rs","is_primary":true,"label":null,"line_end":11,"line_start":11,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":42,"highlight_start":11,"text":"use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};"}]},{"byte_end":379,"byte_start":370,"column_end":86,"column_start":77,"expansion":null,"file_name":"src/bin/rust_64.rs","is_primary":true,"label":null,"line_end":11,"line_start":11,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":86,"highlight_start":77,"text":"use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};"}]},{"byte_end":409,"byte_start":380,"column_end":116,"column_start":87,"expansion":null,"file_name":"src/bin/rust_64.rs","is_primary":true,"label":null,"line_end":11,"line_start":11,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":116,"highlight_start":87,"text":"use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `HashMap`, `ascii::AsciiExt`, `max`, `ops::Index`, `self`, `slice::Iter`","spans":[{"byte_end":315,"byte_start":304,"column_end":22,"column_start":11,"expansion":null,"file_name":"src/bin/rust_64.rs","is_primary":true,"label":null,"line_end":11,"line_start":11,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":11,"text":"use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};"}]},{"byte_end":326,"byte_start":323,"column_end":33,"column_start":30,"expansion":null,"file_name":"src/bin/rust_64.rs","is_primary":true,"label":null,"line_end":11,"line_start":11,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":30,"text":"use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};"}]},{"byte_end":332,"byte_start":328,"column_end":39,"column_start":35,"expansion":null,"file_name":"src/bin/rust_64.rs","is_primary":true,"label":null,"line_end":11,"line_start":11,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":35,"text":"use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};"}]},{"byte_end":379,"byte_start":372,"column_end":86,"column_start":79,"expansion":null,"file_name":"src/bin/rust_64.rs","is_primary":true,"label":null,"line_end":11,"line_start":11,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":86,"highlight_start":79,"text":"use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};"}]},{"byte_end":392,"byte_start":382,"column_end":99,"column_start":89,"expansion":null,"file_name":"src/bin/rust_64.rs","is_primary":true,"label":null,"line_end":11,"line_start":11,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":99,"highlight_start":89,"text":"use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};"}]},{"byte_end":409,"byte_start":394,"column_end":116,"column_start":101,"expansion":null,"file_name":"src/bin/rust_64.rs","is_primary":true,"label":null,"line_end":11,"line_start":11,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":116,"highlight_start":101,"text":"use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};"}]}]}}
{"reason":"compiler-message","package_id":"rust 0.1.0 (path+file:///home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust)","manifest_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"rust_64","src_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/src/bin/rust_64.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning: unused import: `rand::Rng`\n  --> src/bin/rust_64.rs:12:5\n   |\n12 | use rand::Rng;\n   |     ^^^^^^^^^\n\n","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":426,"byte_start":412,"column_end":15,"column_start":1,"expansion":null,"file_name":"src/bin/rust_64.rs","is_primary":true,"label":null,"line_end":12,"line_start":12,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":15,"highlight_start":1,"text":"use rand::Rng;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `rand::Rng`","spans":[{"byte_end":425,"byte_start":416,"column_end":14,"column_start":5,"expansion":null,"file_name":"src/bin/rust_64.rs","is_primary":true,"label":null,"line_end":12,"line_start":12,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":14,"highlight_start":5,"text":"use rand::Rng;"}]}]}}
{"reason":"compiler-message","package_id":"rust 0.1.0 (path+file:///home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust)","manifest_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"rust_64","src_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/src/bin/rust_64.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning: unused import: `regex::Regex`\n  --> src/bin/rust_64.rs:13:5\n   |\n13 | use regex::Regex;\n   |     ^^^^^^^^^^^^\n\n","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":444,"byte_start":427,"column_end":18,"column_start":1,"expansion":null,"file_name":"src/bin/rust_64.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":18,"highlight_start":1,"text":"use regex::Regex;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `regex::Regex`","spans":[{"byte_end":443,"byte_start":431,"column_end":17,"column_start":5,"expansion":null,"file_name":"src/bin/rust_64.rs","is_primary":true,"label":null,"line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":5,"text":"use regex::Regex;"}]}]}}
{"reason":"compiler-message","package_id":"rust 0.1.0 (path+file:///home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust)","manifest_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"rust_64","src_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/src/bin/rust_64.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning: unused imports: `Any`, `TypeId`\n  --> src/bin/rust_64.rs:15:16\n   |\n15 | use std::any::{Any, TypeId};\n   |                ^^^  ^^^^^^\n\n","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":482,"byte_start":454,"column_end":29,"column_start":1,"expansion":null,"file_name":"src/bin/rust_64.rs","is_primary":true,"label":null,"line_end":15,"line_start":15,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":29,"highlight_start":1,"text":"use std::any::{Any, TypeId};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `Any`, `TypeId`","spans":[{"byte_end":472,"byte_start":469,"column_end":19,"column_start":16,"expansion":null,"file_name":"src/bin/rust_64.rs","is_primary":true,"label":null,"line_end":15,"line_start":15,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":16,"text":"use std::any::{Any, TypeId};"}]},{"byte_end":480,"byte_start":474,"column_end":27,"column_start":21,"expansion":null,"file_name":"src/bin/rust_64.rs","is_primary":true,"label":null,"line_end":15,"line_start":15,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":21,"text":"use std::any::{Any, TypeId};"}]}]}}
{"reason":"compiler-message","package_id":"rust 0.1.0 (path+file:///home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust)","manifest_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"rust_64","src_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/src/bin/rust_64.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning: use of deprecated trait `std::ascii::AsciiExt`: use inherent methods instead\n  --> src/bin/rust_64.rs:11:108\n   |\n11 | use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};\n   |                                                                                                            ^^^^^^^^\n   |\n   = note: `#[warn(deprecated)]` on by default\n\n","children":[{"children":[],"code":null,"level":"note","message":"`#[warn(deprecated)]` on by default","rendered":null,"spans":[]}],"code":{"code":"deprecated","explanation":null},"level":"warning","message":"use of deprecated trait `std::ascii::AsciiExt`: use inherent methods instead","spans":[{"byte_end":409,"byte_start":401,"column_end":116,"column_start":108,"expansion":null,"file_name":"src/bin/rust_64.rs","is_primary":true,"label":null,"line_end":11,"line_start":11,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":116,"highlight_start":108,"text":"use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};"}]}]}}
{"reason":"compiler-message","package_id":"rust 0.1.0 (path+file:///home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust)","manifest_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"rust_64","src_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/src/bin/rust_64.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0599]: no method named `is_vowel` found for type `char` in the current scope\n  --> src/bin/rust_64.rs:22:14\n   |\n22 |         if c.is_vowel() && !c.is_uppercase() { \n   |              ^^^^^^^^ method not found in `char`\n\n","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `is_vowel` found for type `char` in the current scope","spans":[{"byte_end":642,"byte_start":634,"column_end":22,"column_start":14,"expansion":null,"file_name":"src/bin/rust_64.rs","is_primary":true,"label":"method not found in `char`","line_end":22,"line_start":22,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":14,"text":"        if c.is_vowel() && !c.is_uppercase() { "}]}]}}
{"reason":"compiler-message","package_id":"rust 0.1.0 (path+file:///home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust)","manifest_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"rust_64","src_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/src/bin/rust_64.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0061]: this function takes 2 arguments but 3 arguments were supplied\n  --> src/bin/rust_64.rs:23:13\n   |\n23 |             replace(s, i, r.get(i)); \n   |             ^^^^^^^ -     -------- unexpected argument of type `Option<&char>`\n   |                     |\n   |                     types differ in mutability\n   |\n   = note: expected mutable reference `&mut usize`\n                      found reference `&str`\nnote: function defined here\n  --> /build/rustc-kAv1jW/rustc-1.75.0+dfsg0ubuntu1~bpo0/library/core/src/mem/mod.rs:912:14\nhelp: remove the extra argument\n   |\n23 -             replace(s, i, r.get(i)); \n23 +             replace(/* &mut usize */, i); \n   |\n\n","children":[{"children":[],"code":null,"level":"note","message":"expected mutable reference `&mut usize`\n           found reference `&str`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"function defined here","rendered":null,"spans":[{"byte_end":33050,"byte_start":33043,"column_end":21,"column_start":14,"expansion":null,"file_name":"/build/rustc-kAv1jW/rustc-1.75.0+dfsg0ubuntu1~bpo0/library/core/src/mem/mod.rs","is_primary":true,"label":null,"line_end":912,"line_start":912,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"help","message":"remove the extra argument","rendered":null,"spans":[{"byte_end":690,"byte_start":689,"column_end":22,"column_start":21,"expansion":null,"file_name":"src/bin/rust_64.rs","is_primary":true,"label":null,"line_end":23,"line_start":23,"suggested_replacement":"/* &mut usize */","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":22,"highlight_start":21,"text":"            replace(s, i, r.get(i)); "}]},{"byte_end":703,"byte_start":693,"column_end":35,"column_start":25,"expansion":null,"file_name":"src/bin/rust_64.rs","is_primary":true,"label":null,"line_end":23,"line_start":23,"suggested_replacement":"","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":35,"highlight_start":25,"text":"            replace(s, i, r.get(i)); "}]}]}],"code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","message":"this function takes 2 arguments but 3 arguments were supplied","spans":[{"byte_end":690,"byte_start":689,"column_end":22,"column_start":21,"expansion":null,"file_name":"src/bin/rust_64.rs","is_primary":false,"label":"types differ in mutability","line_end":23,"line_start":23,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":21,"text":"            replace(s, i, r.get(i)); "}]},{"byte_end":703,"byte_start":695,"column_end":35,"column_start":27,"expansion":null,"file_name":"src/bin/rust_64.rs","is_primary":false,"label":"unexpected argument of type `Option<&char>`","line_end":23,"line_start":23,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":27,"text":"            replace(s, i, r.get(i)); "}]},{"byte_end":688,"byte_start":681,"column_end":20,"column_start":13,"expansion":null,"file_name":"src/bin/rust_64.rs","is_primary":true,"label":null,"line_end":23,"line_start":23,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":13,"text":"            replace(s, i, r.get(i)); "}]}]}}
{"reason":"compiler-message","package_id":"rust 0.1.0 (path+file:///home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust)","manifest_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"rust_64","src_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/src/bin/rust_64.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0308]: `if` and `else` have incompatible types\n  --> src/bin/rust_64.rs:25:13\n   |\n22 | /         if c.is_vowel() && !c.is_uppercase() { \n23 | |             replace(s, i, r.get(i)); \n   | |             ------------------------\n   | |             |                      |\n   | |             |                      help: consider removing this semicolon\n   | |             expected because of this\n24 | |         } else { \n25 | |             0 \n   | |             ^ expected `()`, found integer\n26 | |         }\n   | |_________- `if` and `else` have incompatible types\n\n","children":[{"children":[],"code":null,"level":"help","message":"consider removing this semicolon","rendered":null,"spans":[{"byte_end":705,"byte_start":704,"column_end":37,"column_start":36,"expansion":null,"file_name":"src/bin/rust_64.rs","is_primary":true,"label":null,"line_end":23,"line_start":23,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":37,"highlight_start":36,"text":"            replace(s, i, r.get(i)); "}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"`if` and `else` have incompatible types","spans":[{"byte_end":738,"byte_start":737,"column_end":14,"column_start":13,"expansion":null,"file_name":"src/bin/rust_64.rs","is_primary":true,"label":"expected `()`, found integer","line_end":25,"line_start":25,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":14,"highlight_start":13,"text":"            0 "}]},{"byte_end":705,"byte_start":681,"column_end":37,"column_start":13,"expansion":null,"file_name":"src/bin/rust_64.rs","is_primary":false,"label":"expected because of this","line_end":23,"line_start":23,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":37,"highlight_start":13,"text":"            replace(s, i, r.get(i)); "}]},{"byte_end":749,"byte_start":629,"column_end":10,"column_start":9,"expansion":null,"file_name":"src/bin/rust_64.rs","is_primary":false,"label":"`if` and `else` have incompatible types","line_end":26,"line_start":22,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":48,"highlight_start":9,"text":"        if c.is_vowel() && !c.is_uppercase() { "},{"highlight_end":38,"highlight_start":1,"text":"            replace(s, i, r.get(i)); "},{"highlight_end":18,"highlight_start":1,"text":"        } else { "},{"highlight_end":15,"highlight_start":1,"text":"            0 "},{"highlight_end":10,"highlight_start":1,"text":"        }"}]}]}}
{"reason":"compiler-message","package_id":"rust 0.1.0 (path+file:///home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust)","manifest_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"rust_64","src_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/src/bin/rust_64.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0425]: cannot find function `rand_string` in this scope\n  --> src/bin/rust_64.rs:32:17\n   |\n32 |         let s = rand_string(5);\n   |                 ^^^^^^^^^^^ not found in this scope\n\n","children":[],"code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","message":"cannot find function `rand_string` in this scope","spans":[{"byte_end":895,"byte_start":884,"column_end":28,"column_start":17,"expansion":null,"file_name":"src/bin/rust_64.rs","is_primary":true,"label":"not found in this scope","line_end":32,"line_start":32,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":17,"text":"        let s = rand_string(5);"}]}]}}
{"reason":"compiler-message","package_id":"rust 0.1.0 (path+file:///home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust)","manifest_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"rust_64","src_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/src/bin/rust_64.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0423]: expected function, found crate `md5`\n  --> src/bin/rust_64.rs:34:24\n   |\n34 |         println!(\"{}\", md5(&s));\n   |                        ^^^ not a function\n\n","children":[],"code":{"code":"E0423","explanation":"An identifier was used like a function name or a value was expected and the\nidentifier exists but it belongs to a different namespace.\n\nErroneous code example:\n\n```compile_fail,E0423\nstruct Foo { a: bool };\n\nlet f = Foo();\n// error: expected function, tuple struct or tuple variant, found `Foo`\n// `Foo` is a struct name, but this expression uses it like a function name\n```\n\nPlease verify you didn't misspell the name of what you actually wanted to use\nhere. Example:\n\n```\nfn Foo() -> u32 { 0 }\n\nlet f = Foo(); // ok!\n```\n\nIt is common to forget the trailing `!` on macro invocations, which would also\nyield this error:\n\n```compile_fail,E0423\nprintln(\"\");\n// error: expected function, tuple struct or tuple variant,\n// found macro `println`\n// did you mean `println!(...)`? (notice the trailing `!`)\n```\n\nAnother case where this error is emitted is when a value is expected, but\nsomething else is found:\n\n```compile_fail,E0423\npub mod a {\n    pub const I: i32 = 1;\n}\n\nfn h1() -> i32 {\n    a.I\n    //~^ ERROR expected value, found module `a`\n    // did you mean `a::I`?\n}\n```\n"},"level":"error","message":"expected function, found crate `md5`","spans":[{"byte_end":935,"byte_start":932,"column_end":27,"column_start":24,"expansion":null,"file_name":"src/bin/rust_64.rs","is_primary":true,"label":"not a function","line_end":34,"line_start":34,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":24,"text":"        println!(\"{}\", md5(&s));"}]}]}}
{"reason":"compiler-message","package_id":"rust 0.1.0 (path+file:///home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust)","manifest_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"rust_64","src_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/src/bin/rust_64.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0433]: failed to resolve: use of undeclared crate or module `typeid`\n  --> src/bin/rust_64.rs:35:24\n   |\n35 |         println!(\"{}\", typeid::of::<i32>().repr());\n   |                        ^^^^^^\n   |                        |\n   |                        use of undeclared crate or module `typeid`\n   |                        help: a struct with a similar name exists: `TypeId`\n\n","children":[{"children":[],"code":null,"level":"help","message":"a struct with a similar name exists","rendered":null,"spans":[{"byte_end":971,"byte_start":965,"column_end":30,"column_start":24,"expansion":null,"file_name":"src/bin/rust_64.rs","is_primary":true,"label":null,"line_end":35,"line_start":35,"suggested_replacement":"TypeId","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":30,"highlight_start":24,"text":"        println!(\"{}\", typeid::of::<i32>().repr());"}]}]}],"code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","message":"failed to resolve: use of undeclared crate or module `typeid`","spans":[{"byte_end":971,"byte_start":965,"column_end":30,"column_start":24,"expansion":null,"file_name":"src/bin/rust_64.rs","is_primary":true,"label":"use of undeclared crate or module `typeid`","line_end":35,"line_start":35,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":24,"text":"        println!(\"{}\", typeid::of::<i32>().repr());"}]}]}}
{"reason":"compiler-message","package_id":"rust 0.1.0 (path+file:///home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust)","manifest_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"rust_64","src_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/src/bin/rust_64.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error: aborting due to 7 previous errors; 5 warnings emitted\n\n","children":[],"code":null,"level":"error","message":"aborting due to 7 previous errors; 5 warnings emitted","spans":[]}}
{"reason":"compiler-message","package_id":"rust 0.1.0 (path+file:///home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust)","manifest_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"rust_64","src_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/src/bin/rust_64.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"Some errors have detailed explanations: E0061, E0308, E0423, E0425, E0428, E0433, E0599.\n","children":[],"code":null,"level":"failure-note","message":"Some errors have detailed explanations: E0061, E0308, E0423, E0425, E0428, E0433, E0599.","spans":[]}}
{"reason":"compiler-message","package_id":"rust 0.1.0 (path+file:///home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust)","manifest_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"rust_64","src_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/src/bin/rust_64.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"For more information about an error, try `rustc --explain E0061`.\n","children":[],"code":null,"level":"failure-note","message":"For more information about an error, try `rustc --explain E0061`.","spans":[]}}
{"reason":"build-finished","success":false}
