{"reason":"compiler-artifact","package_id":"memchr 2.5.0 (registry+https://github.com/rust-lang/crates.io-index)","manifest_path":"/home/simao/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.5.0/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/simao/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.5.0/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/target/debug/build/memchr-89f27e1d4194eed3/build-script-build"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"memchr 2.5.0 (registry+https://github.com/rust-lang/crates.io-index)","linked_libs":[],"linked_paths":[],"cfgs":["memchr_runtime_simd","memchr_runtime_sse2","memchr_runtime_sse42","memchr_runtime_avx"],"env":[],"out_dir":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/target/debug/build/memchr-65d4344c3a86368c/out"}
{"reason":"compiler-artifact","package_id":"libc 0.2.139 (registry+https://github.com/rust-lang/crates.io-index)","manifest_path":"/home/simao/.cargo/registry/src/github.com-1ecc6299db9ec823/libc-0.2.139/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/simao/.cargo/registry/src/github.com-1ecc6299db9ec823/libc-0.2.139/build.rs","edition":"2015","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/target/debug/build/libc-fcc8e41b1bbb72cd/build-script-build"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"libc 0.2.139 (registry+https://github.com/rust-lang/crates.io-index)","linked_libs":[],"linked_paths":[],"cfgs":["freebsd11","libc_priv_mod_use","libc_union","libc_const_size_of","libc_align","libc_int128","libc_core_cvoid","libc_packedN","libc_cfg_target_vendor","libc_non_exhaustive","libc_ptr_addr_of","libc_underscore_const_names","libc_const_extern_fn"],"env":[],"out_dir":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/target/debug/build/libc-a2202c645d850565/out"}
{"reason":"compiler-artifact","package_id":"memchr 2.5.0 (registry+https://github.com/rust-lang/crates.io-index)","manifest_path":"/home/simao/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"memchr","src_path":"/home/simao/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.5.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/target/debug/deps/libmemchr-8f02a2eba876215d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"regex-syntax 0.6.28 (registry+https://github.com/rust-lang/crates.io-index)","manifest_path":"/home/simao/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.28/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"regex-syntax","src_path":"/home/simao/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.28/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","unicode","unicode-age","unicode-bool","unicode-case","unicode-gencat","unicode-perl","unicode-script","unicode-segment"],"filenames":["/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/target/debug/deps/libregex_syntax-d87efd87ff8e8051.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"md5 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)","manifest_path":"/home/simao/.cargo/registry/src/github.com-1ecc6299db9ec823/md5-0.7.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"md5","src_path":"/home/simao/.cargo/registry/src/github.com-1ecc6299db9ec823/md5-0.7.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/target/debug/deps/libmd5-a37029e215759d5f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"aho-corasick 0.7.20 (registry+https://github.com/rust-lang/crates.io-index)","manifest_path":"/home/simao/.cargo/registry/src/github.com-1ecc6299db9ec823/aho-corasick-0.7.20/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"aho_corasick","src_path":"/home/simao/.cargo/registry/src/github.com-1ecc6299db9ec823/aho-corasick-0.7.20/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/target/debug/deps/libaho_corasick-b4033ddd2627ef64.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"libc 0.2.139 (registry+https://github.com/rust-lang/crates.io-index)","manifest_path":"/home/simao/.cargo/registry/src/github.com-1ecc6299db9ec823/libc-0.2.139/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"libc","src_path":"/home/simao/.cargo/registry/src/github.com-1ecc6299db9ec823/libc-0.2.139/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/target/debug/deps/liblibc-4435a060dcfc25c8.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"rand 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)","manifest_path":"/home/simao/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.4.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand","src_path":"/home/simao/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.4.6/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","libc","std"],"filenames":["/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/target/debug/deps/librand-54e90b789ee440ce.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"regex 1.7.1 (registry+https://github.com/rust-lang/crates.io-index)","manifest_path":"/home/simao/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.7.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"regex","src_path":"/home/simao/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.7.1/src/lib.rs","edition":"2018","doc":true,"doctest":false,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["aho-corasick","default","memchr","perf","perf-cache","perf-dfa","perf-inline","perf-literal","std","unicode","unicode-age","unicode-bool","unicode-case","unicode-gencat","unicode-perl","unicode-script","unicode-segment"],"filenames":["/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/target/debug/deps/libregex-646ba2766471edbd.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-message","package_id":"rust 0.1.0 (path+file:///home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust)","manifest_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"rust_13","src_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/src/bin/rust_13.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error: expected `{`, found `|`\n  --> src/bin/rust_13.rs:34:104\n   |\n34 |                 .map(ascii::AsciiExt::from_unsafe).and_then(|chr| if chr.is_whitespace() { None } else |chr)\n   |                                                             -----                                      ^ expected `{`\n   |                                                             |\n   |                                                             while parsing the body of this closure\n   |\nhelp: you might have meant to open the body of the closure\n   |\n34 ~                 .map(ascii::AsciiExt::from_unsafe).and_then(|chr| { if chr.is_whitespace() { None } else |chr)\n35 |             {\n ...\n41 |             }\n42 ~         }}\n   |\n\n","children":[{"children":[],"code":null,"level":"help","message":"you might have meant to open the body of the closure","rendered":null,"spans":[{"byte_end":976,"byte_start":976,"column_end":66,"column_start":66,"expansion":null,"file_name":"src/bin/rust_13.rs","is_primary":true,"label":null,"line_end":34,"line_start":34,"suggested_replacement":" {","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":66,"highlight_start":66,"text":"                .map(ascii::AsciiExt::from_unsafe).and_then(|chr| if chr.is_whitespace() { None } else |chr)"}]},{"byte_end":1341,"byte_start":1341,"column_end":9,"column_start":9,"expansion":null,"file_name":"src/bin/rust_13.rs","is_primary":true,"label":null,"line_end":42,"line_start":42,"suggested_replacement":"}","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":9,"highlight_start":9,"text":"        }"}]}]}],"code":null,"level":"error","message":"expected `{`, found `|`","spans":[{"byte_end":1015,"byte_start":1014,"column_end":105,"column_start":104,"expansion":null,"file_name":"src/bin/rust_13.rs","is_primary":true,"label":"expected `{`","line_end":34,"line_start":34,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":105,"highlight_start":104,"text":"                .map(ascii::AsciiExt::from_unsafe).and_then(|chr| if chr.is_whitespace() { None } else |chr)"}]},{"byte_end":976,"byte_start":971,"column_end":66,"column_start":61,"expansion":null,"file_name":"src/bin/rust_13.rs","is_primary":false,"label":"while parsing the body of this closure","line_end":34,"line_start":34,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":66,"highlight_start":61,"text":"                .map(ascii::AsciiExt::from_unsafe).and_then(|chr| if chr.is_whitespace() { None } else |chr)"}]}]}}
{"reason":"compiler-message","package_id":"rust 0.1.0 (path+file:///home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust)","manifest_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"rust_13","src_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/src/bin/rust_13.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error: expected one of `)`, `,`, `.`, `?`, `{`, or an operator, found `}`\n  --> src/bin/rust_13.rs:42:9\n   |\n33 |             match m.to_ascii_range()\n   |             ----- while parsing this `match` expression\n...\n41 |             }\n   |              - expected one of `)`, `,`, `.`, `?`, `{`, or an operator\n42 |         }\n   |         ^ unexpected token\n\n","children":[],"code":null,"level":"error","message":"expected one of `)`, `,`, `.`, `?`, `{`, or an operator, found `}`","spans":[{"byte_end":1332,"byte_start":1332,"column_end":14,"column_start":14,"expansion":null,"file_name":"src/bin/rust_13.rs","is_primary":false,"label":"expected one of `)`, `,`, `.`, `?`, `{`, or an operator","line_end":41,"line_start":41,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":14,"highlight_start":14,"text":"            }"}]},{"byte_end":1342,"byte_start":1341,"column_end":10,"column_start":9,"expansion":null,"file_name":"src/bin/rust_13.rs","is_primary":true,"label":"unexpected token","line_end":42,"line_start":42,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":10,"highlight_start":9,"text":"        }"}]},{"byte_end":891,"byte_start":886,"column_end":18,"column_start":13,"expansion":null,"file_name":"src/bin/rust_13.rs","is_primary":false,"label":"while parsing this `match` expression","line_end":33,"line_start":33,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":13,"text":"            match m.to_ascii_range()"}]}]}}
{"reason":"compiler-message","package_id":"rust 0.1.0 (path+file:///home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust)","manifest_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"rust_13","src_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/src/bin/rust_13.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning: unused imports: `HashMap`, `HashSet`, `ascii::AsciiExt`, `mem::replace`, `ops::Index`, `self`, `slice::Iter`\n --> src/bin/rust_13.rs:8:11\n  |\n8 | use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};\n  |           ^^^^^^^^^^^             ^^^^   ^^^^^^^^^^^^                ^^^^^^^  ^^^^^^^   ^^^^^^^^^^  ^^^^^^^^^^^^^^^\n  |\n  = note: `#[warn(unused_imports)]` on by default\n\n","children":[{"children":[],"code":null,"level":"note","message":"`#[warn(unused_imports)]` on by default","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"remove the unused imports","rendered":null,"spans":[{"byte_end":109,"byte_start":96,"column_end":24,"column_start":11,"expansion":null,"file_name":"src/bin/rust_13.rs","is_primary":true,"label":null,"line_end":8,"line_start":8,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":24,"highlight_start":11,"text":"use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};"}]},{"byte_end":124,"byte_start":118,"column_end":39,"column_start":33,"expansion":null,"file_name":"src/bin/rust_13.rs","is_primary":true,"label":null,"line_end":8,"line_start":8,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":39,"highlight_start":33,"text":"use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};"}]},{"byte_end":201,"byte_start":125,"column_end":116,"column_start":40,"expansion":null,"file_name":"src/bin/rust_13.rs","is_primary":true,"label":null,"line_end":8,"line_start":8,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":116,"highlight_start":40,"text":"use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `HashMap`, `HashSet`, `ascii::AsciiExt`, `mem::replace`, `ops::Index`, `self`, `slice::Iter`","spans":[{"byte_end":107,"byte_start":96,"column_end":22,"column_start":11,"expansion":null,"file_name":"src/bin/rust_13.rs","is_primary":true,"label":null,"line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":11,"text":"use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};"}]},{"byte_end":124,"byte_start":120,"column_end":39,"column_start":35,"expansion":null,"file_name":"src/bin/rust_13.rs","is_primary":true,"label":null,"line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":39,"highlight_start":35,"text":"use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};"}]},{"byte_end":139,"byte_start":127,"column_end":54,"column_start":42,"expansion":null,"file_name":"src/bin/rust_13.rs","is_primary":true,"label":null,"line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":54,"highlight_start":42,"text":"use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};"}]},{"byte_end":162,"byte_start":155,"column_end":77,"column_start":70,"expansion":null,"file_name":"src/bin/rust_13.rs","is_primary":true,"label":null,"line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":77,"highlight_start":70,"text":"use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};"}]},{"byte_end":171,"byte_start":164,"column_end":86,"column_start":79,"expansion":null,"file_name":"src/bin/rust_13.rs","is_primary":true,"label":null,"line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":86,"highlight_start":79,"text":"use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};"}]},{"byte_end":184,"byte_start":174,"column_end":99,"column_start":89,"expansion":null,"file_name":"src/bin/rust_13.rs","is_primary":true,"label":null,"line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":99,"highlight_start":89,"text":"use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};"}]},{"byte_end":201,"byte_start":186,"column_end":116,"column_start":101,"expansion":null,"file_name":"src/bin/rust_13.rs","is_primary":true,"label":null,"line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":116,"highlight_start":101,"text":"use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};"}]}]}}
{"reason":"compiler-message","package_id":"rust 0.1.0 (path+file:///home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust)","manifest_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"rust_13","src_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/src/bin/rust_13.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning: unused import: `rand::Rng`\n --> src/bin/rust_13.rs:9:5\n  |\n9 | use rand::Rng;\n  |     ^^^^^^^^^\n\n","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":218,"byte_start":204,"column_end":15,"column_start":1,"expansion":null,"file_name":"src/bin/rust_13.rs","is_primary":true,"label":null,"line_end":9,"line_start":9,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":15,"highlight_start":1,"text":"use rand::Rng;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `rand::Rng`","spans":[{"byte_end":217,"byte_start":208,"column_end":14,"column_start":5,"expansion":null,"file_name":"src/bin/rust_13.rs","is_primary":true,"label":null,"line_end":9,"line_start":9,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":14,"highlight_start":5,"text":"use rand::Rng;"}]}]}}
{"reason":"compiler-message","package_id":"rust 0.1.0 (path+file:///home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust)","manifest_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"rust_13","src_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/src/bin/rust_13.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning: unused import: `regex::Regex`\n  --> src/bin/rust_13.rs:10:5\n   |\n10 | use regex::Regex;\n   |     ^^^^^^^^^^^^\n\n","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":236,"byte_start":219,"column_end":18,"column_start":1,"expansion":null,"file_name":"src/bin/rust_13.rs","is_primary":true,"label":null,"line_end":10,"line_start":10,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":18,"highlight_start":1,"text":"use regex::Regex;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `regex::Regex`","spans":[{"byte_end":235,"byte_start":223,"column_end":17,"column_start":5,"expansion":null,"file_name":"src/bin/rust_13.rs","is_primary":true,"label":null,"line_end":10,"line_start":10,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":5,"text":"use regex::Regex;"}]}]}}
{"reason":"compiler-message","package_id":"rust 0.1.0 (path+file:///home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust)","manifest_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"rust_13","src_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/src/bin/rust_13.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning: unused import: `md5`\n  --> src/bin/rust_13.rs:11:5\n   |\n11 | use md5;\n   |     ^^^\n\n","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":245,"byte_start":237,"column_end":9,"column_start":1,"expansion":null,"file_name":"src/bin/rust_13.rs","is_primary":true,"label":null,"line_end":11,"line_start":11,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":9,"highlight_start":1,"text":"use md5;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `md5`","spans":[{"byte_end":244,"byte_start":241,"column_end":8,"column_start":5,"expansion":null,"file_name":"src/bin/rust_13.rs","is_primary":true,"label":null,"line_end":11,"line_start":11,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":8,"highlight_start":5,"text":"use md5;"}]}]}}
{"reason":"compiler-message","package_id":"rust 0.1.0 (path+file:///home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust)","manifest_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"rust_13","src_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/src/bin/rust_13.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning: unused imports: `Any`, `TypeId`\n  --> src/bin/rust_13.rs:12:16\n   |\n12 | use std::any::{Any, TypeId};\n   |                ^^^  ^^^^^^\n\n","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":274,"byte_start":246,"column_end":29,"column_start":1,"expansion":null,"file_name":"src/bin/rust_13.rs","is_primary":true,"label":null,"line_end":12,"line_start":12,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":29,"highlight_start":1,"text":"use std::any::{Any, TypeId};"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused imports: `Any`, `TypeId`","spans":[{"byte_end":264,"byte_start":261,"column_end":19,"column_start":16,"expansion":null,"file_name":"src/bin/rust_13.rs","is_primary":true,"label":null,"line_end":12,"line_start":12,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":19,"highlight_start":16,"text":"use std::any::{Any, TypeId};"}]},{"byte_end":272,"byte_start":266,"column_end":27,"column_start":21,"expansion":null,"file_name":"src/bin/rust_13.rs","is_primary":true,"label":null,"line_end":12,"line_start":12,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":27,"highlight_start":21,"text":"use std::any::{Any, TypeId};"}]}]}}
{"reason":"compiler-message","package_id":"rust 0.1.0 (path+file:///home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust)","manifest_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"rust_13","src_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/src/bin/rust_13.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning: use of deprecated trait `std::ascii::AsciiExt`: use inherent methods instead\n --> src/bin/rust_13.rs:8:108\n  |\n8 | use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};\n  |                                                                                                            ^^^^^^^^\n  |\n  = note: `#[warn(deprecated)]` on by default\n\n","children":[{"children":[],"code":null,"level":"note","message":"`#[warn(deprecated)]` on by default","rendered":null,"spans":[]}],"code":{"code":"deprecated","explanation":null},"level":"warning","message":"use of deprecated trait `std::ascii::AsciiExt`: use inherent methods instead","spans":[{"byte_end":201,"byte_start":193,"column_end":116,"column_start":108,"expansion":null,"file_name":"src/bin/rust_13.rs","is_primary":true,"label":null,"line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":116,"highlight_start":108,"text":"use std::{slice::Iter, cmp::{max, self}, mem::replace, collections::{HashSet, HashMap}, ops::Index, ascii::AsciiExt};"}]}]}}
{"reason":"compiler-message","package_id":"rust 0.1.0 (path+file:///home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust)","manifest_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"rust_13","src_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/src/bin/rust_13.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0599]: no method named `gcd` found for type `i32` in the current scope\n  --> src/bin/rust_13.rs:16:21\n   |\n16 |     let gcd = max(a.gcd(&b).unwrap());\n   |                     ^^^ method not found in `i32`\n\n","children":[],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `gcd` found for type `i32` in the current scope","spans":[{"byte_end":356,"byte_start":353,"column_end":24,"column_start":21,"expansion":null,"file_name":"src/bin/rust_13.rs","is_primary":true,"label":"method not found in `i32`","line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":24,"highlight_start":21,"text":"    let gcd = max(a.gcd(&b).unwrap());"}]}]}}
{"reason":"compiler-message","package_id":"rust 0.1.0 (path+file:///home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust)","manifest_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"rust_13","src_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/src/bin/rust_13.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0061]: this function takes 2 arguments but 1 argument was supplied\n  --> src/bin/rust_13.rs:16:15\n   |\n16 |     let gcd = max(a.gcd(&b).unwrap());\n   |               ^^^-------------------- an argument is missing\n   |\nnote: function defined here\n  --> /build/rustc-kAv1jW/rustc-1.75.0+dfsg0ubuntu1~bpo0/library/core/src/cmp.rs:1273:8\nhelp: provide the argument\n   |\n16 |     let gcd = max(a.gcd(&b).unwrap(), /* v2 */);\n   |                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n","children":[{"children":[],"code":null,"level":"note","message":"function defined here","rendered":null,"spans":[{"byte_end":39736,"byte_start":39733,"column_end":11,"column_start":8,"expansion":null,"file_name":"/build/rustc-kAv1jW/rustc-1.75.0+dfsg0ubuntu1~bpo0/library/core/src/cmp.rs","is_primary":true,"label":null,"line_end":1273,"line_start":1273,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]},{"children":[],"code":null,"level":"help","message":"provide the argument","rendered":null,"spans":[{"byte_end":370,"byte_start":350,"column_end":38,"column_start":18,"expansion":null,"file_name":"src/bin/rust_13.rs","is_primary":true,"label":null,"line_end":16,"line_start":16,"suggested_replacement":"(a.gcd(&b).unwrap(), /* v2 */)","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":38,"highlight_start":18,"text":"    let gcd = max(a.gcd(&b).unwrap());"}]}]}],"code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","message":"this function takes 2 arguments but 1 argument was supplied","spans":[{"byte_end":370,"byte_start":350,"column_end":38,"column_start":18,"expansion":null,"file_name":"src/bin/rust_13.rs","is_primary":false,"label":"an argument is missing","line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":18,"text":"    let gcd = max(a.gcd(&b).unwrap());"}]},{"byte_end":350,"byte_start":347,"column_end":18,"column_start":15,"expansion":null,"file_name":"src/bin/rust_13.rs","is_primary":true,"label":null,"line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":15,"text":"    let gcd = max(a.gcd(&b).unwrap());"}]}]}}
{"reason":"compiler-message","package_id":"rust 0.1.0 (path+file:///home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust)","manifest_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"rust_13","src_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/src/bin/rust_13.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: expected a `FnMut(char)` closure, found `{integer}`\n  --> src/bin/rust_13.rs:26:36\n   |\n26 |         let (s,d)=word.splitn(' ', 2);\n   |                        ------      ^ expected an `FnMut(char)` closure, found `{integer}`\n   |                        |\n   |                        required by a bound introduced by this call\n   |\n   = help: the trait `FnMut<(char,)>` is not implemented for `{integer}`\n   = help: the following other types implement trait `Pattern<'a>`:\n             char\n             [char; N]\n             &'b String\n             &'b [char; N]\n             &'b [char]\n             &'c &'b str\n             &'b str\n   = note: required for `{integer}` to implement `Pattern<'_>`\nnote: required by a bound in `core::str::<impl str>::splitn`\n  --> /build/rustc-kAv1jW/rustc-1.75.0+dfsg0ubuntu1~bpo0/library/core/src/str/mod.rs:1567:5\n\n","children":[{"children":[],"code":null,"level":"help","message":"the trait `FnMut<(char,)>` is not implemented for `{integer}`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"the following other types implement trait `Pattern<'a>`:\n  char\n  [char; N]\n  &'b String\n  &'b [char; N]\n  &'b [char]\n  &'c &'b str\n  &'b str","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `{integer}` to implement `Pattern<'_>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `core::str::<impl str>::splitn`","rendered":null,"spans":[{"byte_end":52673,"byte_start":52595,"column_end":83,"column_start":5,"expansion":null,"file_name":"/build/rustc-kAv1jW/rustc-1.75.0+dfsg0ubuntu1~bpo0/library/core/src/str/mod.rs","is_primary":true,"label":null,"line_end":1567,"line_start":1567,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"expected a `FnMut(char)` closure, found `{integer}`","spans":[{"byte_end":663,"byte_start":662,"column_end":37,"column_start":36,"expansion":null,"file_name":"src/bin/rust_13.rs","is_primary":true,"label":"expected an `FnMut(char)` closure, found `{integer}`","line_end":26,"line_start":26,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":37,"highlight_start":36,"text":"        let (s,d)=word.splitn(' ', 2);"}]},{"byte_end":656,"byte_start":650,"column_end":30,"column_start":24,"expansion":null,"file_name":"src/bin/rust_13.rs","is_primary":false,"label":"required by a bound introduced by this call","line_end":26,"line_start":26,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":24,"text":"        let (s,d)=word.splitn(' ', 2);"}]}]}}
{"reason":"compiler-message","package_id":"rust 0.1.0 (path+file:///home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust)","manifest_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"rust_13","src_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/src/bin/rust_13.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n  --> src/bin/rust_13.rs:26:31\n   |\n26 |         let (s,d)=word.splitn(' ', 2);\n   |                        ------ ^^^ expected `usize`, found `char`\n   |                        |\n   |                        arguments to this method are incorrect\n   |\nnote: method defined here\n  --> /build/rustc-kAv1jW/rustc-1.75.0+dfsg0ubuntu1~bpo0/library/core/src/str/mod.rs:1567:12\n\n","children":[{"children":[],"code":null,"level":"note","message":"method defined here","rendered":null,"spans":[{"byte_end":52608,"byte_start":52602,"column_end":18,"column_start":12,"expansion":null,"file_name":"/build/rustc-kAv1jW/rustc-1.75.0+dfsg0ubuntu1~bpo0/library/core/src/str/mod.rs","is_primary":true,"label":null,"line_end":1567,"line_start":1567,"suggested_replacement":null,"suggestion_applicability":null,"text":[]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":660,"byte_start":657,"column_end":34,"column_start":31,"expansion":null,"file_name":"src/bin/rust_13.rs","is_primary":true,"label":"expected `usize`, found `char`","line_end":26,"line_start":26,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":34,"highlight_start":31,"text":"        let (s,d)=word.splitn(' ', 2);"}]},{"byte_end":656,"byte_start":650,"column_end":30,"column_start":24,"expansion":null,"file_name":"src/bin/rust_13.rs","is_primary":false,"label":"arguments to this method are incorrect","line_end":26,"line_start":26,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":24,"text":"        let (s,d)=word.splitn(' ', 2);"}]}]}}
{"reason":"compiler-message","package_id":"rust 0.1.0 (path+file:///home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust)","manifest_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"rust_13","src_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/src/bin/rust_13.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n  --> src/bin/rust_13.rs:26:13\n   |\n26 |         let (s,d)=word.splitn(' ', 2);\n   |             ^^^^^ ------------------- this expression has type `std::str::SplitN<'_, {integer}>`\n   |             |\n   |             expected `SplitN<'_, {integer}>`, found `(_, _)`\n   |\n   = note: expected struct `std::str::SplitN<'_, {integer}>`\n               found tuple `(_, _)`\n\n","children":[{"children":[],"code":null,"level":"note","message":"expected struct `std::str::SplitN<'_, {integer}>`\n    found tuple `(_, _)`","rendered":null,"spans":[]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":644,"byte_start":639,"column_end":18,"column_start":13,"expansion":null,"file_name":"src/bin/rust_13.rs","is_primary":true,"label":"expected `SplitN<'_, {integer}>`, found `(_, _)`","line_end":26,"line_start":26,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":13,"text":"        let (s,d)=word.splitn(' ', 2);"}]},{"byte_end":664,"byte_start":645,"column_end":38,"column_start":19,"expansion":null,"file_name":"src/bin/rust_13.rs","is_primary":false,"label":"this expression has type `std::str::SplitN<'_, {integer}>`","line_end":26,"line_start":26,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":38,"highlight_start":19,"text":"        let (s,d)=word.splitn(' ', 2);"}]}]}}
{"reason":"compiler-message","package_id":"rust 0.1.0 (path+file:///home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust)","manifest_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"rust_13","src_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/src/bin/rust_13.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n  --> src/bin/rust_13.rs:52:60\n   |\n50 |     fn get_word_length(word:&str) -> u32{\n   |                                      --- expected `u32` because of return type\n51 |         let c = word.chars().count();\n52 |          if c == 1 || (c % 30 != 0 && c % 10 == 0){ return c } else { return c + 1; }\n   |                                                            ^ expected `u32`, found `usize`\n   |\nhelp: you can convert a `usize` to a `u32` and panic if the converted value doesn't fit\n   |\n52 |          if c == 1 || (c % 30 != 0 && c % 10 == 0){ return c.try_into().unwrap() } else { return c + 1; }\n   |                                                             ++++++++++++++++++++\n\n","children":[{"children":[],"code":null,"level":"help","message":"you can convert a `usize` to a `u32` and panic if the converted value doesn't fit","rendered":null,"spans":[{"byte_end":1609,"byte_start":1609,"column_end":61,"column_start":61,"expansion":null,"file_name":"src/bin/rust_13.rs","is_primary":true,"label":null,"line_end":52,"line_start":52,"suggested_replacement":".try_into().unwrap()","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":61,"highlight_start":61,"text":"         if c == 1 || (c % 30 != 0 && c % 10 == 0){ return c } else { return c + 1; }"}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":1609,"byte_start":1608,"column_end":61,"column_start":60,"expansion":null,"file_name":"src/bin/rust_13.rs","is_primary":true,"label":"expected `u32`, found `usize`","line_end":52,"line_start":52,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":61,"highlight_start":60,"text":"         if c == 1 || (c % 30 != 0 && c % 10 == 0){ return c } else { return c + 1; }"}]},{"byte_end":1509,"byte_start":1506,"column_end":41,"column_start":38,"expansion":null,"file_name":"src/bin/rust_13.rs","is_primary":false,"label":"expected `u32` because of return type","line_end":50,"line_start":50,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":41,"highlight_start":38,"text":"    fn get_word_length(word:&str) -> u32{"}]}]}}
{"reason":"compiler-message","package_id":"rust 0.1.0 (path+file:///home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust)","manifest_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"rust_13","src_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/src/bin/rust_13.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error: aborting due to 8 previous errors; 6 warnings emitted\n\n","children":[],"code":null,"level":"error","message":"aborting due to 8 previous errors; 6 warnings emitted","spans":[]}}
{"reason":"compiler-message","package_id":"rust 0.1.0 (path+file:///home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust)","manifest_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"rust_13","src_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/src/bin/rust_13.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"Some errors have detailed explanations: E0061, E0277, E0308, E0599.\n","children":[],"code":null,"level":"failure-note","message":"Some errors have detailed explanations: E0061, E0277, E0308, E0599.","spans":[]}}
{"reason":"compiler-message","package_id":"rust 0.1.0 (path+file:///home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust)","manifest_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"rust_13","src_path":"/home/simao/Desktop/CodeGeeX2/benchmark/humanevalx/rust/src/bin/rust_13.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"For more information about an error, try `rustc --explain E0061`.\n","children":[],"code":null,"level":"failure-note","message":"For more information about an error, try `rustc --explain E0061`.","spans":[]}}
{"reason":"build-finished","success":false}
